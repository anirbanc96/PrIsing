source("C:/Users/anirbanc/Dropbox (Penn)/Private Ising Model/Experiments/Data/HIV Transmission Network/Codes/MSEvsEPS.R", echo=TRUE)
source("C:/Users/anirbanc/Dropbox (Penn)/Private Ising Model/Experiments/Data/HIV Transmission Network/Codes/MSEvsEPS.R", echo=TRUE)
source("C:/Users/anirbanc/Dropbox (Penn)/Private Ising Model/Experiments/Data/HIV Transmission Network/Codes/DataManage.R", echo=TRUE)
source("Functions.R")
beta.hat.nonpriv <- beta.hat.N((2*HIV.status.df$HIV-1), N, J.N)
beta.range <- seq(beta.hat.nonpriv-0.5, beta.hat.nonpriv+0.5, length.out = 5)
# value of privacy parameters
epsilon.vec <- c(5, 7.5, 10, 20, 50, 100)
# number of experiments done
n.rep <- 500
MSE.mat <- matrix(0, length(beta.range), (length(epsilon.vec) + 1))
for (i in 1:length(epsilon.vec)){
epsilon <- epsilon.vec[i]
delta <- 1/N
for (j in 1:length(beta.range)){
beta.est.iter <- sim.beta.est(n.rep, beta.range[j], N, J.N,
priv = T, epsilon, delta)[,2]
MSE.mat[j,i] <- sum((beta.est.iter - beta.range[j])^2)/n.rep
print (c(j,i))
}
}
for (j in 1:length(beta.range)){
beta.est.iter <- sim.beta.est(n.rep, beta.range[j], N, J.N,
priv = F)
MSE.mat[j,(length(epsilon.vec) + 1)] <- sum((beta.est.iter - beta.range[j])^2)/n.rep
print (c(j,(length(epsilon.vec) + 1)))
}
MSE.dat <- cbind(rep(0, (length(epsilon.vec) + 1)),
t(MSE.mat))
colnames(MSE.dat) <- c("epsilon", "beta1", "beta2", "beta3", "beta4", "beta5")
MSE.dat <- as_tibble(MSE.dat)
MSE.dat[,1] <- as.factor(c(epsilon.vec,Inf))
write.csv(MSE.dat, file = "MSEvsEpsilonValuesSexual.csv")
MSE.plot <- MSE.dat %>%
ggplot(aes(x = epsilon, y = beta1)) +
geom_point(aes(x = epsilon, y = beta1), col = "navy") +
geom_line(aes(x = epsilon, y = beta1, col = "Beta 1",
group = epsilon[1])) +
geom_point(aes(x = epsilon, y = beta2), col = "darkorange") +
geom_line(aes(x = epsilon, y = beta2, col = "Beta 2",
group = epsilon[2])) +
geom_point(aes(x = epsilon, y = beta3), col = "darkred") +
geom_line(aes(x = epsilon, y = beta3, col = "Beta 3",
group = epsilon[3])) +
geom_point(aes(x = epsilon, y = beta4), col = "darkmagenta") +
geom_line(aes(x = epsilon, y = beta4, col = "Beta 4",
group = epsilon[4])) +
geom_point(aes(x = epsilon, y = beta5), col = "forestgreen") +
geom_line(aes(x = epsilon, y = beta5, col = "Beta 5",
group = epsilon[5])) +
scale_colour_manual("Privacy", breaks = c("Beta 1",
"Beta 2", "Beta 3",
"Beta 4", "Beta 5"),
values = c("cornflowerblue", "orange", "red", "plum",
"darkseagreen"),
labels = c(expression(paste(beta, " = ", hat(beta), " - ", 0.5)),
expression(paste(beta, " = ", hat(beta), " - ", 0.25)),
expression(paste(beta, " = ", hat(beta))),
expression(paste(beta, " = ", hat(beta), " + ", 0.25)),
expression(paste(beta, " = ", hat(beta), " + ", 0.5)))) +
labs(title = TeX(r'(MSE vs $\epsilon$)'), x = TeX(r'($\epsilon$)'),
y = TeX(r'(MSE)'), color = "Legend Title\n") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = c(0.8,0.7),
legend.text.align = 0,
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"))
# saving the plot
ggsave(plot = MSE.plot, filename = "MSEvsEpsilonSexual.pdf", device = "pdf",
width = 6, height = 5)
source("~/Dropbox (Penn)/Private Ising Model/aistats2024/Experiments/Data/HIV Transmission Network/Codes/DataManage.R", echo=TRUE)
data2$YEAR
table(data2$YEAR)
data <- data2 %>%
filter(HIV1 %in% c(0,1), HIV2 %in% c(0,1)) %>%
# TIETYPE = 1 <- Social Network
# TIETYPE = 3 <- Sexual Network
# STUDYNUM = 1 <- Colorado Springs Study
# DYADTYPE = 0 <- Ego-Alter Dyads
filter(STUDYNUM == 1, TIETYPE == 1, DYADTYPE == 0) %>%
select(ID1, ID2, HIV1, HIV2, YEAR)
table(data$YEAR)
priv.beta <- function(sigma, N, J.N, epsilon, delta, n.rep = 500,
seed.vec = 1:n.rep){
##############################################################################
# INPUTS: sigma     <- size n vector coming from Ising Model
#         N         <- size of the underlying graph
#         J.N.      <- adjacency matrix in the Hamiltonian
#         epsilon   <- epsilon parameter for privacy
#         delta     <- delta parameter for privacy
#         n.rep     <- number of repetitions performed
#         seed.vec  <- n.rep sized vector of seeds needed to noise generation
##############################################################################
# OUTPUT: beta.est.priv <- n.rep sized vector of private MPLE estimates
##############################################################################
# n.rep sized vector of seeds needed to noise generation
seed.vec <- (1:n.rep)
# Value of Delta from Algorithm
Delta <- Delta.func(epsilon, N, J.N)
# Value of gamma (noise variance) in Algorithm
gamma <- gamma.func(N, J.N, epsilon, delta)
# Type of privacy -> (epsilon, delta) or (epsilon,0)
priv.ty <- (delta>0)
# parallelising for faster code
cores <- detectCores()
cl <- makeCluster(cores[1]-1)
registerDoParallel(cl)
writeLines(c("Running Function To Estimate private beta"), "log.txt")
# running loop for n.rep many private MPLE estimate of beta
beta.est.priv <- foreach(k=1:n.rep, .combine = rbind, .export = ls(envir=globalenv())) %dopar% {
cat(paste("Starting iteration",k,"\n"), file = "log.txt", append = T)
beta.est.priv.iter <- beta.hat.N(sigma, N, J.N,
priv = T, priv.ty = priv.ty,
Delta = Delta, gamma = gamma,
seed = seed.vec[k])
cat(paste("Completed iteration",k ,"\n"), file = "log.txt", append = T)
beta.est.priv.iter
}
stopCluster(cl)
return (as.vector(beta.est.priv))
}
f <- function(x, y = x){return (x+y)}
f(1)
